<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.druid.driverClassName}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${db.druid.url}"/>
        <property name="username" value="${db.druid.username}"/>
        <property name="password" value="${db.druid.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${db.druid.initialSize:1}"/>
        <property name="minIdle" value="${db.druid.minIdle:1}"/>
        <property name="maxActive" value="${db.druid.maxActive:20}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${db.druid.maxWait:60000}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.druid.timeBetweenEvictionRunsMillis:60000}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${db.druid.minEvictableIdleTimeMillis:300000}"/>

        <property name="validationQuery" value="${db.druid.validationQuery}"/>
        <property name="testWhileIdle" value="${db.druid.testWhileIdle:false}"/>
        <property name="testOnBorrow" value="${db.druid.testOnBorrow:false}"/>
        <property name="testOnReturn" value="${db.druid.testOnReturn:false}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${db.druid.poolPreparedStatements:false}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${db.druid.maxPoolPreparedStatementPerConnectionSize:20}"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:sql/mybatis-config.xml"/>
        <property name="mapperLocations">
            <array>
                <value>classpath*:sql/**/*Mapper.xml</value>
            </array>
        </property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            helperDialect=${mybatis.database.pageHelper.dialect:postgresql}
                        </value>
                    </property>
                </bean>
<!--                <bean class="cn.hsa.its.common.mybatisplus.plugins.BatchUpdateInterceptor">-->
<!--                    <description>SQL批量更新拦截器</description>-->
<!--                </bean>-->
            </array>
        </property>
        <property name="databaseIdProvider" ref="databaseIdProvider"/>
        <property name="globalConfig" ref="hsafGlobalConfig"/>
    </bean>

    <bean id="hsafGlobalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <description>SQL全局配置</description>
        <property name="dbConfig" ref="hsafDbConfig"/>
<!--        <property name="sqlInjector" ref="hsafLogicSqlInjector"/>-->
    </bean>
    <bean id="hsafDbConfig"
          class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
        <description>SQL全局数据库配置</description>
        <property name="idType" value="ASSIGN_UUID"/>
        <property name="logicDeleteValue" value="0"/>
        <property name="logicNotDeleteValue" value="1"/>
    </bean>
<!--    <bean id="hsafLogicSqlInjector"-->
<!--          class="cn.hsa.its.common.mybatisplus.injector.LogicSqlInjector">-->
<!--        <description>SQL注入器</description>-->
<!--    </bean>-->

    <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
        <property name="properties">
            <props>
                <prop key="SQL Server">sqlserver</prop>
                <prop key="DB2">db2</prop>
                <prop key="Oracle">oracle</prop>
                <prop key="MySQL">mysql</prop>
                <prop key="H2">h2</prop>
                <prop key="POSTGRESQL">postgresql</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <aop:config>
        <aop:pointcut expression="execution(public * cn.hsa..*BOImpl.*(..))" id="pointcutDb"/>
        <aop:advisor advice-ref="hsaftxAdvice" pointcut-ref="pointcutDb"/>
    </aop:config>

    <tx:advice id="hsaftxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 读取 -->
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
            <!-- 新增 -->
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <!-- 删除 -->
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <!-- 修改 -->
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <!-- 其他 -->
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <aop:aspectj-autoproxy/>
</beans>